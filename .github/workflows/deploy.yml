name: Deploy WinForms App to AWS AppStream

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: windows-latest  # ‚úÖ Uses Windows Runner

    steps:
    # 1Ô∏è‚É£ Checkout the WinForms App Source Code
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 2Ô∏è‚É£ Set Image Name with Timestamp
    - name: Generate Timestamped Image Name
      shell: pwsh
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd_HHmm"
        echo "IMAGE_NAME=por-base-image-$timestamp" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "IMAGE_BUILDER_NAME=por-image-builder-$timestamp" | Out-File -FilePath $env:GITHUB_ENV -Append

    # 3Ô∏è‚É£ Setup .NET for Windows Build
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'  # Change to match your .NET version

    # 4Ô∏è‚É£ Build WinForms Application
    - name: Build WinForms App
      run: |
        dotnet publish -c Release -r win-x64 -o ./publish

    # 5Ô∏è‚É£ Configure AWS CLI
    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    # 5Ô∏è‚É£ Create Image Builder
    - name: Create Image Builder
      shell: pwsh
      run: |
        aws appstream create-image-builder `
          --name "$env:IMAGE_BUILDER_NAME" `
          --instance-type stream.standard.medium `
          --image-name "AppStream-WinServer2022-10-22-2024" `
          --enable-default-internet-access
           --vpc-config '{
            "SubnetIds": ["subnet-0758627f32019e939", "subnet-016fd27868d016310"],
            "SecurityGroupIds": ["sg-0de82aa9ccd4a5dd7","sg-0744b69fd510ddcbd"]
          }'

         # Wait for Image Builder to be running
        do {
          Start-Sleep -Seconds 30
          $STATUS = aws appstream describe-image-builders --names "$env:IMAGE_BUILDER_NAME" --query "ImageBuilders[0].State" --output text
          echo "Image Builder Status: $STATUS"
        } while ($STATUS -ne "RUNNING")

    # 6Ô∏è‚É£ Install WinForms App on Image Builder
    - name: Install WinForms App and Required Software on Image Builder
      shell: pwsh
      run: |
        aws ssm send-command --document-name "AWS-RunPowerShellScript" `
          --targets Key=tag:Name,Values="$env:IMAGE_BUILDER_NAME" `
          --parameters '{
            "commands":[
              "# Create directories",
              "New-Item -ItemType Directory -Path \"C:\\Apps\\POR\" -Force",
              
              "# Copy published app",
              "Copy-Item -Path \"./publish/*\" -Destination \"C:\\Apps\\POR\" -Recurse -Force",
              
              "# Launch Image Assistant to add application",
              "& \"C:\\Program Files\\Amazon\\Photon\\image-assistant.exe\" add-application --name \"PORApp\" --absolute-app-path \"C:\\Apps\\POR\\YourApp.exe\" --display-name \"POR Application\" --working-directory \"C:\\Apps\\POR\"",

               "# Optional: Install any other required software (example with Chrome)",
              "$Path = $env:TEMP; $Installer = \"chrome_installer.exe\"; Invoke-WebRequest \"http://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $Path\\$Installer; Start-Process -FilePath $Path\\$Installer -Args \"/silent /install\" -Verb RunAs -Wait",
              
              "# Wait for installations to complete",
              "Start-Sleep -Seconds 30"
            ]
          }'

      # 7Ô∏è‚É£ Create a New AppStream Image from Image Builder
    - name: Create New AppStream Image
      shell: pwsh
      run: |
        aws appstream create-image `
          --name "$env:IMAGE_NAME" `
          --image-builder-name "por_tf_appstream_image_builder"

    # 9Ô∏è‚É£ Update Fleet to Use New Image
    - name: Update AppStream Fleet with New Image
      shell: pwsh
      run: |
        aws appstream update-fleet --name "${{ secrets.APPSTREAM_FLEET_NAME }}" --image-name "$env:IMAGE_NAME"

    # üîü Restart Fleet to Apply New Image
    - name: Restart AppStream Fleet
      shell: pwsh
      run: |
        aws appstream stop-fleet --name "${{ secrets.APPSTREAM_FLEET_NAME }}"
        aws appstream start-fleet --name "${{ secrets.APPSTREAM_FLEET_NAME }}"
